//$file${Sources::bsp.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: QM_settings.qm
// File:  ${Sources::bsp.h}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Sources::bsp.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef BSP_HPP
#define BSP_HPP
#include "Sampler.h"

/**
 * Simple Board Support Package (BSP)
 */
class BSP {
public:
    // Number of SM clock ticks in a second
    static constexpr int SM_TICKS_PER_SEC = 100;

    // Delay between load detection and collector on
    static constexpr int ON_DELAY      = 5*SM_TICKS_PER_SEC;

    // Delay between load off and collector off
    static constexpr int OFF_DELAY     = 10*SM_TICKS_PER_SEC;

    // Initialise BSP
    static void init();

   /**
    * Get Delay time [.1s .. 4s]
    *
    * @return Delay time in SM ticks
    */
   static unsigned getDelayTime() {
       return Sampler::getDelayTime() / (1000/SM_TICKS_PER_SEC);
    }

   /**
    * Get Hold time [1s..10s]
    *
    * @return Hold time in SM ticks
    */
   static unsigned getHoldTime() {
       return Sampler::getHoldTime() / (1000/SM_TICKS_PER_SEC);
    }

   /**
    * Indicates is the load is operating
    *
    * @return True if operating
    */
   static bool isLoadOn() {
      return Sampler::isLoadOn();
   }

}; // BSP

/**
 * Events
 */
enum DustCollectorSignals {
    RESERVED = QP::Q_USER_SIG,    // Reserve system signals

    TIMEOUT_SIG,     // Timer elapsed signal
    LOADON_SIG,      // Load detected
    LOADOFF_SIG,     // Load stopped

    MAX_SIG,         // Last signal used
};

// Active object(s) used in this application -------------------------------
//$declare${AOs::AO_DustCollectorStateMachine} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_DustCollectorStateMachine} .......................................
extern QP::QActive * const AO_DustCollectorStateMachine;
//$enddecl${AOs::AO_DustCollectorStateMachine} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif // BSP_HPP
