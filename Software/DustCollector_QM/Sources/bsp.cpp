//$file${Sources::bsp.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: QM_settings.qm
// File:  ${Sources::bsp.cpp}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Sources::bsp.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include <cstdlib>    // For exit()
#include "qpcpp.hpp"  // QP/C++ framework API
#include "bsp.h"      // Board Support Package interface
#include "hardware.h" // Generated USBDM hardware objects
#include "Sampler.h"

using namespace std;
using namespace QP;
using namespace USBDM;

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Shared::evLoadOn} ........................................................
QP::QEvt evLoadOn  = QEvt(LOADON_SIG);

//${Shared::evLoadOff} .......................................................
QP::QEvt evLoadOff  = QEvt(LOADOFF_SIG);
//$enddef${Shared} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// ADC Resolution - 10-bit unsigned (single-ended mode)

// Initialise BSP
void BSP::init() {
   Sampler::init();
}

/**
 * Callback functions needed by the framework
 */
void QF::onStartup() {

    // Start SYSTICK Timer at given rate
   SysTick_Config(SystemCoreClock / BSP::SM_TICKS_PER_SEC);

   // Assign all priority bits for preemption-prio. and none to sub-prio.
//   NVIC_SetPriorityGrouping(0U);

   // Set priorities of ISRs used in the system, see NOTE1
   NVIC_SetPriority(SysTick_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U);
}

void QP::QF::onCleanup() {
}

void QP::QV::onIdle() {
   QF_INT_ENABLE();
}

extern "C"
void SysTick_Handler() {

    QP::QTimeEvt::TICK_X(0U, nullptr); // process time events at rate 0

    static bool wasOn = false;
    bool  isOn = Sampler::isLoadOn();
    if (wasOn != isOn) {
       if (isOn) {
          AO_DustCollectorStateMachine->post_(&evLoadOn,   0, nullptr);
       }
       else {
          AO_DustCollectorStateMachine->post_(&evLoadOff,   0, nullptr);
       }
       wasOn = isOn;
    }
}

void Q_onAssert(char const * const module, int loc) {
    (void)module; (void)loc; // In case console disabled
    console.WRITELN("Assertion failed in ", module, ":", loc);
    exit(-1);
}

