//$file${Sources::main.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: QM_settings.qm
// File:  ${Sources::main.cpp}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Sources::main.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"  // QP/C++ framework API
#include "bsp.h"      // Board Support Package interface
#include "hardware.h" // Generated USBDM hardware objects

using namespace QP;
using namespace USBDM;

// Main Function
int main() {

    // Initialise the framework
    QF::init();

    // Initialise the BSP
    BSP::init();

    // Start the DustCollector active object

    // Event queue buffer for the DustCollector
    static QEvt const *dustCollectorQueueSto[10];

    AO_DustCollectorStateMachine->start(
        1U,                              // Priority of the active object
        dustCollectorQueueSto,           // Event queue buffer
        Q_DIM(dustCollectorQueueSto),    // Length of the buffer
        (void *)0, 0U);                  // Private stack (not used on the desktop)

    return QF::run(); // let the framework run the application
}
