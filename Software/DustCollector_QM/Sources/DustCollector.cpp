//$file${Sources::DustCollector.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: QM_settings.qm
// File:  ${Sources::DustCollector.cpp}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Sources::DustCollector.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"    // QP/C++ framework API
#include "bsp.h"        // Board Support Package interface
#include "hardware.h"   // Generated USBDM hardware objects
#include "Sampler.h"

using namespace QP;
using namespace USBDM;

// Declare the DustCollector class
//$declare${AOs::DustCollectorStateMachine} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::DustCollectorStateMachine} ..........................................
class DustCollectorStateMachine : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    static DustCollectorStateMachine instance;

public:
    DustCollectorStateMachine()
      : QActive(Q_STATE_CAST(&DustCollectorStateMachine::initial)),
        m_timeEvt(this, TIMEOUT_SIG, 0U)
    {}
    virtual ~DustCollectorStateMachine() = default;;

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(Idle);
    Q_STATE_DECL(Operating);
    Q_STATE_DECL(Hold);
    Q_STATE_DECL(Delay);
}; // class DustCollectorStateMachine
//$enddecl${AOs::DustCollectorStateMachine} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Opaque pointer to the DustCollector active object
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::AO_DustCollectorStateMachine} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_DustCollectorStateMachine} .......................................
QP::QActive * const AO_DustCollectorStateMachine = &DustCollectorStateMachine::instance;
//$enddef${AOs::AO_DustCollectorStateMachine} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Define the DustCollector class (including the state machine)
//$define${AOs::DustCollectorStateMachine} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::DustCollectorStateMachine} ..........................................
DustCollectorStateMachine DustCollectorStateMachine::instance;

//${AOs::DustCollectorSta~::SM} ..............................................
Q_STATE_DEF(DustCollectorStateMachine, initial) {
    //${AOs::DustCollectorSta~::SM::initial}
    (void)e; // unused parameter
    #if USE_CONSOLE
    console.writeln("Starting");
    #endif


    QS_FUN_DICTIONARY(&DustCollectorStateMachine::Idle);
    QS_FUN_DICTIONARY(&DustCollectorStateMachine::Operating);
    QS_FUN_DICTIONARY(&DustCollectorStateMachine::Hold);
    QS_FUN_DICTIONARY(&DustCollectorStateMachine::Delay);

    return tran(&Idle);
}

//${AOs::DustCollectorSta~::SM::Idle} ........................................
Q_STATE_DEF(DustCollectorStateMachine, Idle) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DustCollectorSta~::SM::Idle}
        case Q_ENTRY_SIG: {
            console.WRITELN("collector off");
            DustCollector::off();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Idle::LOADON}
        case LOADON_SIG: {
            status_ = tran(&Delay);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::DustCollectorSta~::SM::Operating} ...................................
Q_STATE_DEF(DustCollectorStateMachine, Operating) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DustCollectorSta~::SM::Operating}
        case Q_ENTRY_SIG: {
            console.WRITELN("collector on");
            DustCollector::on();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Operating::LOADOFF}
        case LOADOFF_SIG: {
            status_ = tran(&Hold);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::DustCollectorSta~::SM::Hold} ........................................
Q_STATE_DEF(DustCollectorStateMachine, Hold) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DustCollectorSta~::SM::Hold}
        case Q_ENTRY_SIG: {
            m_timeEvt.armX(BSP::getHoldTime(), 0);
            console.WRITELN("collector holding");
            HoldLed::on();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Hold}
        case Q_EXIT_SIG: {
            m_timeEvt.disarm();
            HoldLed::off();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Hold::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&Idle);
            break;
        }
        //${AOs::DustCollectorSta~::SM::Hold::LOADON}
        case LOADON_SIG: {
            status_ = tran(&Operating);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::DustCollectorSta~::SM::Delay} .......................................
Q_STATE_DEF(DustCollectorStateMachine, Delay) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DustCollectorSta~::SM::Delay}
        case Q_ENTRY_SIG: {
            m_timeEvt.armX(BSP::getDelayTime(), 0);
            console.WRITELN("collector delaying");
            DelayLed::on();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Delay}
        case Q_EXIT_SIG: {
            m_timeEvt.disarm();
            DelayLed::off();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::DustCollectorSta~::SM::Delay::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&Operating);
            break;
        }
        //${AOs::DustCollectorSta~::SM::Delay::LOADOFF}
        case LOADOFF_SIG: {
            status_ = tran(&Idle);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::DustCollectorStateMachine} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
