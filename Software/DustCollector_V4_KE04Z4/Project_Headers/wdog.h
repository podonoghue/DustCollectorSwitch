/**
 * @file     wdog.h (180.ARM_Peripherals/Project_Headers/wdog.h)
 * @brief    External Watchdog Monitor
 */

#ifndef HEADER_WDOG_H_
#define HEADER_WDOG_H_
/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

// No handler defined for WDOG


namespace USBDM {
 
/**
 * @addtogroup WDOG_Group WDOG, Watchdog Timer
 * @brief Abstraction for Watchdog Timer
 * @{
 */
/**
 * Peripheral information for WDOG, Watchdog Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * Watchdog enable
    * (wdog_cs1_en)
    *
    * Main enable for WDOG
    * When disabled, the watchdog timer is kept in the reset state, but the other exception conditions can 
    * still trigger a reset/interrupt
    */
   enum WdogEnable : uint16_t {
      WdogEnable_Disabled   = WDOG_CS1_EN(0),  ///< Watchdog disabled
      WdogEnable_Enabled    = WDOG_CS1_EN(1),  ///< Watchdog enabled
   };

   /**
    * Test Mode: Controls the fast test mode.
    * (wdog_cs1_tst)
    *
    * Allows exercising all bits of the counter to confirm that the watchdog is functioning properly.
    * This write-once field is cleared on POR only
    */
   enum WdogTestMode : uint16_t {
      WdogTestMode_Disabled           = WDOG_CS1_TST(0),  ///< Disabled
      WdogTestMode_UserMode           = WDOG_CS1_TST(1),  ///< Disabled - User mode
      WdogTestMode_TestModeLowByte    = WDOG_CS1_TST(2),  ///< Enabled, Only CNTL, TOVALL used
      WdogTestMode_TestModeHighByte   = WDOG_CS1_TST(3),  ///< Enabled, Only CNTH, TOVALH used
   };

   /**
    * Enable watchdog in WAIT mode
    * (wdog_cs1_wait)
    *
    * This write-once bit enables the watchdog to operate when the chip is in wait mode
    */
   enum WdogEnableInWait : uint16_t {
      WdogEnableInWait_Disabled   = WDOG_CS1_WAIT(0),  ///< Disabled in WAIT mode
      WdogEnableInWait_Enabled    = WDOG_CS1_WAIT(1),  ///< Enabled in WAIT mode
   };

   /**
    * Enable watchdog in STOP mode
    * (wdog_cs1_stop)
    *
    * This write-once bit enables the watchdog to operate when the chip is in stop mode
    */
   enum WdogEnableInStop : uint16_t {
      WdogEnableInStop_Disabled   = WDOG_CS1_STOP(0),  ///< Disabled in STOP mode
      WdogEnableInStop_Enabled    = WDOG_CS1_STOP(1),  ///< Enabled in STOP mode
   };

   /**
    * Enable watchdog in DEBUG mode
    * (wdog_cs1_dbg)
    *
    * This write-once bit enables the watchdog to operate when the chip is in debug mode
    */
   enum WdogEnableInDebug : uint16_t {
      WdogEnableInDebug_Disabled   = WDOG_CS1_DBG(0),  ///< Disabled in DEBUG mode
      WdogEnableInDebug_Enabled    = WDOG_CS1_DBG(1),  ///< Enabled in DEBUG mode
   };

   /**
    * Allow watchdog update
    * (wdog_cs1_update)
    *
    * Enables updates to watchdog write-once registers, after 
    * the reset-triggered initial configuration window closes
    * This still requires the unlock sequence
    */
   enum WdogAllowUpdate : uint16_t {
      WdogAllowUpdate_Disabled   = WDOG_CS1_UPDATE(0),  ///< Update Disabled
      WdogAllowUpdate_Enabled    = WDOG_CS1_UPDATE(1),  ///< Update Enabled
   };

   /**
    * Enable watchdog windowing mode
    * (wdog_cs2_win)
    *
    * Windowing mode only allows refresh during a restricted window
    */
   enum WdogWindow : uint16_t {
      WdogWindow_Disabled   = WDOG_CS2_WIN(0),  ///< Windowing mode disabled
      WdogWindow_Enabled    = WDOG_CS2_WIN(1),  ///< Windowing mode enabled
   };

   /**
    * Action on watchdog event
    * (wdog_cs1_int)
    *
    * This write-once bit allows an interrupt handler to record state prior to forcing a reset.
    * The reset occurs after a delay of 128 bus clocks following the interrupt vector fetch.
    */
   enum WdogAction : uint16_t {
      WdogAction_ImmediateReset        = WDOG_CS1_INT(0),  ///< Immediate Reset
      WdogAction_ResetAfterInterrupt   = WDOG_CS1_INT(1),  ///< Interrupt followed by reset
   };

   /**
    * Watchdog clock source
    * (wdog_cs2_clk)
    *
    * This write-once field indicates the clock source that feeds the watchdog counter
    */
   enum WdogClock : uint16_t {
      WdogClock_SystemBusClk   = WDOG_CS2_CLK(0),  ///< System Bus clock
      WdogClock_LpoClk         = WDOG_CS2_CLK(1),  ///< 1 kHz low-power oscillator (LPOCLK)
      WdogClock_Icsirclk       = WDOG_CS2_CLK(2),  ///< ICS internal reference clock (ICSIRCLK)
      WdogClock_ExternalClk    = WDOG_CS2_CLK(3),  ///< External clock source (OSCERCLK)
   };

   /**
    * Prescaler for the watchdog clock source
    * (wdog_cs2_pres)
    *
    * This write-once bit enables a fixed 256 pre-scaling of watchdog counter reference clock
    */
   enum WdogPrescale : uint16_t {
      WdogPrescale_Direct     = WDOG_CS2_PRES(0),  ///< Prescale /1
      WdogPrescale_DivBy256   = WDOG_CS2_PRES(1),  ///< Prescale /256
   };

   /**
    * Values for refresh and update registers
    * (wdog_constants1)
    *
    * Note values are transposed for direct write to CNT register
    */
   enum WdogRefresh {
      WdogRefresh_1   = 0x02A6,  ///< 1st refresh value
      WdogRefresh_2   = 0x80B4,  ///< 2nd refresh value
   };

   /**
    * Values for refresh and update registers
    * (wdog_constants2)
    *
    * Note values are transposed for direct write to CNT register
    */
   enum WdogUnlock {
      WdogUnlock_1   = 0x20C5,  ///< 1st unlock value
      WdogUnlock_2   = 0x28D9,  ///< 2nd unlock value
   };

class WdogBasicInfo {

public:
   //! Common class based callback code has been generated for this class of peripheral
   // (_BasicInfoIrqGuard)
   static constexpr bool irqHandlerInstalled = false;
   
   /**
    * Class used to do initialisation of the Wdog
    *
    * This class has a templated constructor that accepts various values.
    * Parameters available may vary with device - see Wdog::DefaultInitValue for relevant example.
    * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
    *
    * @note This constructor may be used to create a const instance in Flash
    *
    * Example:
    * @code
    * ///
    * /// WDOG call-back
    * ///
    * /// @param status  Status reflecting active inputs
    * ///
    * void wdogCallback(ErrorCode ec) {
    *    ....
    * }
    *
    * static const Wdog::Init wdogInit {
    *
    *   // Setup values
    *   WdogEnable_Enabled ,          // Watchdog enable
    *   WdogEnableInWait_Disabled ,   // Enable watchdog in WAIT mode
    *   WdogEnableInStop_Disabled ,   // Enable watchdog in STOP mode
    *   WdogEnableInDebug_Disabled ,  // Enable watchdog in DEBUG mode
    *   WdogAllowUpdate_Enabled ,     // Allow watchdog update
    *   WdogWindow_Disabled ,         // Enable watchdog windowing mode
    *   WdogAction_ImmediateReset ,   // Action on watchdog event
    *   WdogClock_SystemBusClk ,      // Watchdog clock source
    *   NvicPriority_Normal,          // IRQ level for this peripheral
    *   wdogCallback,                // Call-back to execute on event - call-back function name
    *   // Either
    *   WdogPrescale_Direct ,         // Prescaler for the watchdog clock source (must be in this order)
    *   2000_ticks, 1000_ticks,       // Timeout and Window values
    *   // **** OR ****
    *   20_seconds, 10_seconds,       // Timeout and Window values (must be in this order)
    *   // Option
    *   Wdog::DefaultInitValue,       // Take base values from DefaultInitValue
    *
    *   wdogCallback,                 // Call-back to execute on event - call-back function name
    *   NvicPriority_Low,                 // Priority for interrupt - Low
    *
    *   // Optional base value to start with (must be last parameter)
    *   Wdog::DefaultInitValue   // Used as base value modified by above
    * };
    *
    * // Initialise Wdog from values specified above
    * Wdog::configure(wdogInit)
    * @endcode
    */
   class Init {
   
   public:
      /**
       * Copy Constructor
       */
      constexpr Init(const Init &other) = default;
   
      /**
       * Default Constructor
       */
      constexpr Init() = default;
   
   }; // class WdogBasicInfo::Init
   
}; // class WdogBasicInfo 

class WdogInfo : public WdogBasicInfo {

public:
   /*
    * Template:wdog_mke
    */
   //! Class based interrupt code has been generated for this class of peripheral
   // (_BasicInfoIrqGuard)
   static constexpr bool irqHandlerInstalled = false;
   
   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = WDOG_IRQS;
   
   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeofArray(irqNums);
   
   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(irqNums[0]);
   }
   
   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(irqNums[0], nvicPriority);
   }
   
   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(irqNums[0]);
   }
   
   /**
    * Basic enable of Wdog
    * Includes enabling clock and configuring all mapped pins if mapPinsOnEnable is selected in configuration
    */
   static void enable() {
   }
   
   /**
    * Disables Wdog
    */
   static void disable() {
   
      
      disableNvicInterrupts();
   }
   
   //! Hardware base address as uint32_t
   static constexpr uint32_t baseAddress = WDOG_BasePtr;
   
   //! Hardware base pointer
   static constexpr HardwarePtr<WDOG_Type> wdog = baseAddress;
   
}; // class WdogInfo



/** Watchdog Refresh value 1 */
static constexpr uint16_t WdogRefresh1 = 0xA602;

/** Watchdog Refresh value 2 */
static constexpr uint16_t WdogRefresh2 = 0xB480;

/** Watchdog Unlock value 1 */
static constexpr uint16_t WdogUnlock1 = 0xC520;

/** Watchdog Unlock value 2 */
static constexpr uint16_t WdogUnlock2 = 0xD928;

/**
 * Template class representing the Watchdog Monitor
 *
 * The Watchdog Timer (WDOG) keeps a watch on the system functioning and resets it in
 * case of its failure. Reasons for failure include run-away software code and the stoppage
 * of the system clock that in a safety critical system can lead to serious consequences. In
 * such cases, the watchdog brings the system into a safe state of operation. The watchdog
 * monitors the operation of the system by expecting periodic communication from the
 * software, generally known as servicing or refreshing the watchdog. If this periodic
 * refreshing does not occur, the watchdog resets the system.
 *
 * @tparam info      Information class for WDOG
 */
template<class Info>
class WdogBase_T : public Info {

protected:
// No private methods found

public:

   /**
    * Hardware instance pointer.
    *
    * @return Reference to WDOG hardware
    */
   static constexpr HardwarePtr<WDOG_Type> wdog = Info::baseAddress;

   /**
    * Writing the sequence of 0xA602 (WdogRefresh_1) followed by 0xB480 (WdogRefresh_2) within 20 bus clock
    * cycles refreshes the WDOG and prevents it from resetting the system. Writing a value other than
    * the above mentioned sequence or if the sequence is longer than 20 bus cycles, resets the system,
    * or if IRQRSTEN is set, it interrupts and then resets the system.
    *
    * @param wdogRefresh_1 1st value to write (WdogRefresh_1)
    * @param wdogRefresh_2 2nd value to write (WdogRefresh_2)
    *
    * @note This operation is time-critical so interrupts are disabled during refresh
    * @note Due to clock domain issues it is necessary to wait at least 5 clock
    *       cycles between attempted refreshes.  This is most significant when
    *       using the LPO clock source (i.e. at least 5 ms in that case).
    */
   static void refresh(WdogRefresh wdogRefresh_1, WdogRefresh wdogRefresh_2) {

      // Protect sequence from interrupts
      CriticalSection cs;

      wdog->CNT = wdogRefresh_1;
      wdog->CNT = wdogRefresh_2;
   }

protected:
#if false
   /**
    *
    * @param[in,out] cs2       Used to obtain clock source (CS2.WDOG_CS2_CLK), updated with prescaler (CS.WDOG_CS2_PRES)
    * @param[in,out] timeout   .seconds Timeout value in seconds -> .ticks   Timeout value in ticks
    * @param[in,out] window    .seconds  Window value in seconds -> .ticks    Window value in ticks
    *
    * @return Error code
    */
   static ErrorCode calculateTimingParameters(
         uint16_t      &cs2,
         Seconds_Ticks &timeout,
         Seconds_Ticks &window) {

      float constexpr maxCount = 0xFFFFUL;

      if ((int)window.toTicks()>(int)timeout.toTicks()) {
         return E_ILLEGAL_PARAM;
      }

      // Try without prescaler
      uint32_t counterFrequency = WdogInfo::getInputClockFrequency((WdogClock)(cs2 & WDOG_CS2_CLK_MASK));
      Seconds maxTime = maxCount/counterFrequency;
      cs2 &= ~WDOG_CS2_PRES_MASK;

      if (timeout.toSeconds()>maxTime) {
         // Try with prescaler
         maxTime *= 256;
         counterFrequency /=256;
         cs2 |= WDOG_CS2_PRES_MASK;
      }
      if (timeout.toSeconds()>maxTime) {
         return setErrorCode(E_TOO_LARGE);
      }
      timeout.fromTicks((Ticks)roundf(timeout.toSeconds()*counterFrequency));
      window.fromTicks((Ticks)roundf(window.toSeconds()*counterFrequency));
      return E_NO_ERROR;
   }
#endif

public:
   /**
    * Disable WDOG
    */
   static inline void disableWdog() {
   
      // Unlock before changing settings
      wdog->CNT  = WdogUnlock_1;
      wdog->CNT  = WdogUnlock_2;
   
      // Read-back to delay until unlock effected
      (void)(wdog->CNT);
   
      // Disable watchdog
      wdog->CS1   = WdogEnable_Disabled|WdogAllowUpdate_Disabled;
      wdog->CS2   = WdogClock_LpoClk;
      wdog->WIN   = 0xFFFF;
      wdog->TOVAL = 0xFFFF;
   }
   

public:

   /**
    * Basic enable WDOG.
    *
    * Dummy function as always clocked.
    */
   static void enable() {
   }

   /**
    * Gets watchdog timer value.
    *
    * @return current timer value
    */
   static Ticks getTimer() {
      return (wdog->CNTH<<16)|wdog->CNTL;
   }

   /**
    * Sets watchdog pre-scaler and time-out value in ticks.
    * The watchdog clock is divided by this value to provide the prescaled WDOG_CLK
    *
    * @param wdogPrescale This prescaler divides the input clock for the watchdog counter
    * @param timeout      The watchdog must be refreshed before the counter reaches this value
    * @param window       If windowed operation is enabled, then the watchdog can only be refreshed
    *        if the timer reaches a value greater than or equal to this window length value.
    *        A refresh outside of this window resets the system
    *
    * @note This is a protected operation which uses unlock
    */
   static void setTimeout(
            WdogPrescale wdogPrescale,
            Ticks        timeout,
            Ticks        window = 0_ticks) {

      // Disable interrupts while accessing watchdog
      CriticalSection cs;
      Info::writeUnlock(WdogUnlock1, WdogUnlock2);
      wdog->CS2    = (wdog->CS2&~WDOG_CS2_PRES_MASK)|wdogPrescale;
      wdog->TOVALH = (unsigned)timeout>>16;
      wdog->TOVALL = (unsigned)timeout;
      wdog->WINH   = (unsigned)window>>16;
      wdog->WINL   = (unsigned)window;
   }

#if false // /WDOG/secondsSupport
   /**
    * Sets the watchdog time-out value in seconds.
    *
    * @param timeout The watchdog must be refreshed before this interval expires
    * @param window  Refresh of the watchdog may not be carried out before this interval has expired i.e.
    *        Refresh must occur within [window...timeout] if window mode is enabled.
    *        A refresh outside of this range resets the system
    *
    * @note This is a protected operation which uses unlock
    * @note This adjusts both the prescaler and the timeout value.
    */
   static ErrorCode setTimeout(
            Seconds timeout,
            Seconds window  = 0.0_s) {

      uint32_t inputClockFreq = WdogInfo::getInputClockFrequency();

      uint32_t timerValue = (uint32_t)(((float)timeout*inputClockFreq));

      WdogPrescale prescaler = WdogPrescale_Direct;
      if (timerValue>0xFFFF) {
         timerValue /= 256;
         prescaler = WdogPrescale_DivBy256;
      }
      if (timerValue>0xFFFF) {
         return setErrorCode(E_TOO_LARGE);
      }
      uint32_t windowValue = (uint64_t)(((float)window*inputClockFreq)/prescaler);
      setTimeout(prescaler, (Ticks)timerValue, (Ticks)windowValue);
      return E_NO_ERROR;
   }
#endif

   /**
    * Lock watchdog register against further changes
    */
   static void lockRegisters() {
      // Protect sequence from interrupts
      CriticalSection cs;

      // Unlock before changing settings
      wdog->CNT = WdogUnlock_1;
      wdog->CNT = WdogUnlock_2;

      // Read-back to delay until change effected
      (void)(wdog->CNT);

      wdog->CS1 = wdog->CS1 & ~WDOG_CS1_UPDATE_MASK;
   }

   /**
    * Disable interface to WDOG
    */
   static void disable() {
      Info::disableClock();
   }

};

   /**
    * Class representing WDOG
    */
   class Wdog : public WdogBase_T<WdogInfo> {};
   

/**
 * End WDOG_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_WDOG_H_ */
