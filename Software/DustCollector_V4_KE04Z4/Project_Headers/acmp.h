/**
 * @file      acmp.h (180.ARM_Peripherals/Project_Headers/acmp-MKE.h)
 * @brief    Abstraction layer for ACMP interface
 *
 * @version  V4.12.
 * @date     13 July 2023
 */

#ifndef PROJECT_HEADERS_ACMP_H_
#define PROJECT_HEADERS_ACMP_H_

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

#if false // /ACMP/_BasicInfoGuard

// No handler defined for ACMP0
// No handler defined for ACMP1


namespace USBDM {

/**
 * Peripheral information for ACMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * ACMP Interrupt Enable
    * (acmp_cs_acie)
    *
    * Controls Interrupt generation
    */
   enum AcmpInterrupt : uint8_t {
      AcmpInterrupt_Disabled   = ACMP_CS_ACIE(0),  ///< Interrupt disabled
      AcmpInterrupt_Enabled    = ACMP_CS_ACIE(1),  ///< Interrupt enabled
   };

   /**
    * InterruptEdge
    * (acmp_cs_acmod)
    *
    * Determines the sensitivity modes of the interrupt trigger
    */
   enum AcmpMode : uint8_t {
      AcmpMode_FallingEdge      = ACMP_CS_ACMOD(0),  ///< Falling edge
      AcmpMode_RisingEdge       = ACMP_CS_ACMOD(1),  ///< Rising edge
      AcmpMode_FallingEdgeAlt   = ACMP_CS_ACMOD(2),  ///< Falling edge alt
      AcmpMode_BothEdges        = ACMP_CS_ACMOD(3),  ///< Both edges
   };

   /**
    * Analogue Comparator Enable
    * (acmp_cs_ace)
    *
    * Enables the ACMP module.
    */
   enum AcmpEnable : uint8_t {
      AcmpEnable_Disabled   = ACMP_CS_ACE(0),  ///< Disabled
      AcmpEnable_Enabled    = ACMP_CS_ACE(1),  ///< Enabled
   };

   /**
    * Analogue Comparator Hysteresis Selection
    * (acmp_cs_hyst)
    *
    * Selects ACMP hysterisis.
    */
   enum AcmpHysterisis : uint8_t {
      AcmpHysterisis_20mV   = ACMP_CS_HYST(0),  ///< 20 mV
      AcmpHysterisis_30mV   = ACMP_CS_HYST(1),  ///< 30 mV
   };

   /**
    * ACMP Interrupt Flag Bit
    * (acmp_cs_acf)
    *
    * Synchronously set by hardware when ACMP output has a valid edge defined by ACMOD.
    * Cleared by writing a 0 to this bit. Writing a 1 to this bit has no effect.
    * The setting of this bit lags the ACMPO ... bus clocks
    */
   enum AcmpFlag : uint8_t {
      AcmpFlag_Write1Clear   = ACMP_CS_ACF(1),  ///< No request
   };

   /**
    * ACMP Output - current value of ACMP output when enabled
    * (acmp_cs_aco)
    *
    * 
    */
   enum AcmpOutputLevel : uint8_t {
      AcmpOutputLevel_AcmpOutputLow    = ACMP_CS_ACO(0),  ///< ACMP output is low or disabled
      AcmpOutputLevel_AcmpOutputHigh   = ACMP_CS_ACO(1),  ///< ACMP output is high
   };

   /**
    * ACMP Positive Input Select
    * (acmp_c0_acpsel_base)
    *
    * Selects the positive input source
    */
   enum AcmpInputPlus : uint8_t {
      AcmpInputPlus_0     = ACMP_C0_ACPSEL(0),  ///< External input 0
      AcmpInputPlus_1     = ACMP_C0_ACPSEL(1),  ///< External input 1
      AcmpInputPlus_2     = ACMP_C0_ACPSEL(2),  ///< External input 2
      AcmpInputPlus_Dac   = ACMP_C0_ACPSEL(3),  ///< Internal DAC
   };

   /**
    * ACMP Negative Input Select
    * (acmp_c0_acnsel_base)
    *
    * Selects the negative input source
    */
   enum AcmpInputMinus : uint8_t {
      AcmpInputMinus_0     = ACMP_C0_ACNSEL(0),  ///< External input 0
      AcmpInputMinus_1     = ACMP_C0_ACNSEL(1),  ///< External input 1
      AcmpInputMinus_2     = ACMP_C0_ACNSEL(2),  ///< External input 2
      AcmpInputMinus_Dac   = ACMP_C0_ACNSEL(3),  ///< Internal DAC
   };

   /**
    * DAC Enable
    * (acmp_c1_dacen)
    *
    * Enables the DAC
    */
   enum AcmpDacEnable : uint8_t {
      AcmpDacEnable_Disabled   = ACMP_C1_DACEN(0),  ///< Disabled
      AcmpDacEnable_Enabled    = ACMP_C1_DACEN(1),  ///< Enabled
   };

   /**
    * DAC Reference Select
    * (acmp_c1_dacref)
    *
    * Selects the reference for the DAC
    */
   enum AcmpDacReference : uint8_t {
      AcmpDacReference_Bandgap   = ACMP_C1_DACREF(0),  ///< Bandgap
      AcmpDacReference_Vdda      = ACMP_C1_DACREF(1),  ///< VDDA
   };

   /**
    * DAC Output Level Selection
    * (acmp_c1_dacval)
    *
    * Selects the DAC output voltage using the formula: 
    * Voutput= (Vin/64)x(DACVAL[5:0]+1) 
    * The Voutput range is from Vin/64 to Vin, the step is Vin/64
    */
   enum AcmpDacValue : uint8_t {
   };

   /**
    * ACMP Input Pin Enables
    * (acmp_c2_acipe_base)
    *
    * Enables ACMP pins as analogue inputs
    * Disables other functions
    */
   enum AcmpInputEnable : uint8_t {
      AcmpInputEnable_0   = ACMP_C2_ACIPE(1<<0),  ///< Pin enable 0
      AcmpInputEnable_1   = ACMP_C2_ACIPE(1<<1),  ///< Pin enable 1
      AcmpInputEnable_2   = ACMP_C2_ACIPE(1<<2),  ///< Pin enable 2
   };


   /**
    * Combines two AcmpInputEnable values (by ORing)
    * Used to create new AcmpInputEnable mask
    * 
    * @param left    Left operand
    * @param right   Right operand
    * 
    * @return  Combined value
    */
   constexpr AcmpInputEnable operator|(AcmpInputEnable left, AcmpInputEnable right) {
      return AcmpInputEnable(long(left)|long(right));
   }
   
   /**
    * Combines two AcmpInputEnable values (by ANDing) to produce a bool result
    * Used to check a value against a AcmpInputEnable mask
    * 
    * @param left    Left operand
    * @param right   Right operand
    * 
    * @return boolean value indicating if the result is non-zero
    */
   constexpr bool operator&(AcmpInputEnable left, AcmpInputEnable right) {
      return bool(long(left)&long(right));
   }
   
   /**
    * ACMP Input Pin Enables
    * (acmp_c2_acipe)
    *
    * Bitmask controlling which ACMP pins are available as analogue inputs
    */
   static constexpr AcmpInputEnable Acmp0InputEnable_PTB2   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<0));  ///< Input 0
   static constexpr AcmpInputEnable Acmp0InputEnable_PTA1   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<1));  ///< Input 1
   static constexpr AcmpInputEnable Acmp0InputEnable_PTA0   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<2));  ///< Input 2


   /**
    * ACMP Output Pin Enable
    * (acmp_cs_acope)
    *
    * Allows the ACMP output to be placed onto external pin
    */
   enum AcmpOutputPin : uint8_t {
      AcmpOutputPin_Disabled   = ACMP_CS_ACOPE(0),  ///< Pin disabled
      AcmpOutputPin_Enabled    = ACMP_CS_ACOPE(1),  ///< Pin enabled
   };

class AcmpBasicInfo {

public:
}; // class AcmpBasicInfo 

class Acmp0Info : public AcmpBasicInfo {

public:
   /*
    * Template:acmp0_mke
    */
   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = ACMP0_IRQS;
   
   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeofArray(irqNums);
   
   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(irqNums[0]);
   }
   
   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(irqNums[0], nvicPriority);
   }
   
   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(irqNums[0]);
   }
   
   /**
    *  Enable clock to Acmp0
    */
   static void enableClock() {
      SIM->SCGC = SIM->SCGC | SIM_SCGC_ACMP0_MASK;
   }
   
   /**
    *  Disable clock to Acmp0
    */
   static void disableClock() {
      SIM->SCGC = SIM->SCGC & ~SIM_SCGC_ACMP0_MASK;
   }
   
   //! Hardware base address as uint32_t
   static constexpr uint32_t baseAddress = ACMP0_BasePtr;
   
   //! Hardware base pointer
   static constexpr HardwarePtr<ACMP_Type> acmp = baseAddress;
   
   //! Peripheral instance number
   static constexpr unsigned instance = 0;
   
}; // class Acmp0Info

/**
 * Peripheral information for ACMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * ACMP Input Pin Enables
    * (acmp_c2_acipe)
    *
    * Bitmask controlling which ACMP pins are available as analogue inputs
    */
   static constexpr AcmpInputEnable Acmp1InputEnable_PTA6   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<0));  ///< Input 0
   static constexpr AcmpInputEnable Acmp1InputEnable_PTA7   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<1));  ///< Input 1
   static constexpr AcmpInputEnable Acmp1InputEnable_PTB4   = AcmpInputEnable(ACMP_C2_ACIPE(1U<<2));  ///< Input 2


class Acmp1Info : public AcmpBasicInfo {

public:
   /*
    * Template:acmp0_mke
    */
   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = ACMP1_IRQS;
   
   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeofArray(irqNums);
   
   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(irqNums[0]);
   }
   
   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(irqNums[0], nvicPriority);
   }
   
   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(irqNums[0]);
   }
   
   /**
    *  Enable clock to Acmp1
    */
   static void enableClock() {
      SIM->SCGC = SIM->SCGC | SIM_SCGC_ACMP1_MASK;
   }
   
   /**
    *  Disable clock to Acmp1
    */
   static void disableClock() {
      SIM->SCGC = SIM->SCGC & ~SIM_SCGC_ACMP1_MASK;
   }
   
   //! Hardware base address as uint32_t
   static constexpr uint32_t baseAddress = ACMP1_BasePtr;
   
   //! Hardware base pointer
   static constexpr HardwarePtr<ACMP_Type> acmp = baseAddress;
   
   //! Peripheral instance number
   static constexpr unsigned instance = 1;
   
}; // class Acmp1Info



/**
 * @addtogroup ACMP_Group ACMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
template <class Info>
class AcmpBase_T : public Info {

protected:
   /** Hardware instance */
   static constexpr HardwarePtr<ACMP_Type> acmp = Info::baseAddress;

// No /ACMP/protectedMethods found
public:
// No /ACMP/publicMethods found
// No /ACMP/InitMethod found
};




// /CMP/InputMapping None Found
/**
 * End ACMP_Group
 * @}
 */
} // End namespace USBDM

#endif // /ACMP/_BasicInfoGuard

#endif /* PROJECT_HEADERS_ACMP_H_ */
