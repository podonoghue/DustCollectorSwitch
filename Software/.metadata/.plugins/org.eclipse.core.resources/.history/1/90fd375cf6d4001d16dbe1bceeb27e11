/**
 ============================================================================
 * @file    main.cpp (180.ARM_Peripherals/Sources/main.cpp)
 * @brief   Dust extractor control
 *
 *  Created on: 10/1/2016
 *      Author: podonoghue
 ============================================================================
 */
#include "hardware.h"
#include "mcg.h"

using namespace USBDM;

constexpr AdcResolution ADC_RESOLUTION = AdcResolution_10bit_se; // ADC Resolution - 10-bit unsigned (single-ended mode)
constexpr Seconds       TICK_TIME      = 1.0_s;

/**
 * Get Hold Control value as [10..100]
 */
unsigned getHoldControl() {
   return 10 + (HoldControl::readAnalogue()*90)/UserAdc::getSingleEndedMaximum(ADC_RESOLUTION);
}

/**
 * Get Delay Control value as [10..100]
 */
unsigned getDelayControl() {
   return 10 + (DelayControl::readAnalogue()*90)/UserAdc::getSingleEndedMaximum(ADC_RESOLUTION);
}

/**
 * Check if the load is operating
 *
 * @return true => Load is operating
 */
bool isLoadOn() {

   // Threshold used to determine if load is operating
   constexpr int THRESHOLD =  UserAdc::getSingleEndedMaximum(ADC_RESOLUTION)/2;

   int current = CurrentSample::readAnalogue();

   return current > THRESHOLD;
}

void initialise() {

   static constexpr PcrInit PORT_INIT(PinDriveStrength_High, PinDriveMode_PushPull, PinSlewRate_Slow);

   static constexpr Adc0BasicInfo::Init adcInit {
      AdcClockSource_Bus ,       // ADC Clock Source - Bus clock
      AdcClockDivider_4 ,        // Clock Divide Select - Divide by 4
      ADC_RESOLUTION ,           // ADC Resolution
   };

   Relay::setOutput(PORT_INIT);
   HoldLed::setOutput(PORT_INIT);
   DelayLed::setOutput(PORT_INIT);

   UserAdc::configure(adcInit);

   CurrentSample::setInput();
   HoldControl::setInput();
   DelayControl::setInput();
}

enum State {s_IDLE, s_DELAY, s_OPERATING, s_HOLD, };

int main() {
   console.writeln("\nStarting");
   console.writeln("Clock mode      = ", Mcg::getClockModeName());
   console.writeln("SystemCoreClock = ", SystemCoreClock, " Hz");
   console.writeln("SystemBusClock  = ", SystemBusClock, " Hz");

   initialise();

   State state = s_IDLE;
   unsigned tickCounter = 0;
   unsigned delayTimeInTicks = 100;
   unsigned holdTimeInTicks  = 100;

   for(;;) {
      switch(state) {
         default:
         case s_IDLE:
            // Update parameters while idle
            delayTimeInTicks = 100 * getDelayControl();
            holdTimeInTicks  = 100 * getHoldControl();

            // Make sure dust collector is off
            Relay::off();

            // Check for load
            if (isLoadOn()) {
               state = s_DELAY;
               tickCounter = 0;
            }
            break;
         case s_DELAY:
            // Check if still delaying
            if (++tickCounter>delayTimeInTicks) {
               state = s_OPERATING;
            }
            break;
         case s_OPERATING:
            // Dust collector on
            Relay::on();
            if (!isLoadOn()) {
               state = s_HOLD;
               tickCounter = 0;
            }
            break;
         case s_HOLD:
            // Check if still holding
            if (++tickCounter>holdTimeInTicks) {
               state = s_IDLE;
            }
            break;
      }
   }
   return 0;
}
