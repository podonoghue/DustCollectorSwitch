/**
 ============================================================================
 * @file    main.cpp (180.ARM_Peripherals/Sources/main.cpp)
 * @brief   Dust extractor control
 *
 *  Created on: 10/1/2016
 *      Author: podonoghue
 ============================================================================
 */
#include "hardware.h"
#include "mcg.h"

using namespace USBDM;

int main() {
   console.writeln("\nStarting");
   console.writeln("Clock mode      = ", Mcg::getClockModeName());
   console.writeln("SystemCoreClock = ", SystemCoreClock, " Hz");
   console.writeln("SystemBusClock  = ", SystemBusClock, " Hz");

   Relay::setOutput(PinDriveStrength_High, PinDriveMode_PushPull, PinSlewRate_Slow);
   HoldLed::setOutput(PinDriveStrength_High, PinDriveMode_PushPull, PinSlewRate_Slow);
   DelayLed::setOutput(PinDriveStrength_High, PinDriveMode_PushPull, PinSlewRate_Slow);

   Adc0BasicInfo::Init adcInit {
      AdcClockSource_Bus , // ADC Clock Source - Asynchronous clock (ADACK)
      AdcClockDivider_1 , // Clock Divide Select - Divide by 1
      AdcResolution_8bit_se , // ADC Resolution - 8-bit unsigned (single-ended mode)
      AdcPower_Normal , // Low-Power Configuration - Normal power configuration
      AdcClockRange_Normal , // High-Speed Configuration - Normal conversion sequence selected
      AdcAsyncClock_Disabled , // Asynchronous Clock Output Enable - Asynchronous clock output disabled
      AdcRefSel_VrefHL , // Voltage Reference Selection - VRefH and VRefl
      AdcDma_Disabled , // DMA Enable - Disabled
      AdcMuxsel_B , // Selects between A/B multiplexor inputs on some ADC channels - The multiplexor selects B channels
      AdcTrigger_Software , // Conversion Trigger Select - Software trigger (write to SC1A)
      AdcAveraging_off , // Hardware Average Select - 1 sample
      AdcContinuous_Disabled , // Selects between single and continuous conversion - Single conversion on each trigger
      NvicPriority_Normal , // IRQ level for this peripheral - Normal
      AdcCompare_Disabled , // Compare function - No comparison done
      0 , // ADC CV low value
      0,  // ADC CV high value
   };

   Adc0::configure(init);
   for(int count = 0;;count++) {

   }
   return 0;
}
